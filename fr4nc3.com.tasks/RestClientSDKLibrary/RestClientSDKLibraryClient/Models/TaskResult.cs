// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace RestClientSDKLibrary.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// Defines the public facing task attributes
    /// </summary>
    public partial class TaskResult
    {
        /// <summary>
        /// Initializes a new instance of the TaskResult class.
        /// </summary>
        public TaskResult() { }

        /// <summary>
        /// Initializes a new instance of the TaskResult class.
        /// </summary>
        public TaskResult(string taskName, bool isCompleted, string dueDate, long? id = default(long?))
        {
            TaskName = taskName;
            IsCompleted = isCompleted;
            DueDate = dueDate;
            Id = id;
        }

        /// <summary>
        /// Gets or sets the task's name.
        /// </summary>
        [JsonProperty(PropertyName = "taskName")]
        public string TaskName { get; set; }

        /// <summary>
        /// task complete status
        /// </summary>
        [JsonProperty(PropertyName = "isCompleted")]
        public bool IsCompleted { get; set; }

        /// <summary>
        /// task due date
        /// </summary>
        [JsonProperty(PropertyName = "dueDate")]
        public string DueDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public long? Id { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (TaskName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TaskName");
            }
            if (DueDate == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DueDate");
            }
            if (this.TaskName != null)
            {
                if (this.TaskName.Length > 100)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "TaskName", 100);
                }
                if (this.TaskName.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "TaskName", 0);
                }
            }
            if (this.DueDate != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(this.DueDate, "\\d{4}-\\d{2}-\\d{2}"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "DueDate", "\\d{4}-\\d{2}-\\d{2}");
                }
            }
        }
    }
}
