// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace RestClientSDKLibrary.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// Error response class
    /// </summary>
    public partial class ErrorResponse
    {
        /// <summary>
        /// Initializes a new instance of the ErrorResponse class.
        /// </summary>
        public ErrorResponse() { }

        /// <summary>
        /// Initializes a new instance of the ErrorResponse class.
        /// </summary>
        public ErrorResponse(int? errorNumber = default(int?), string parameterName = default(string), string parameterValue = default(string), string errorDescription = default(string))
        {
            ErrorNumber = errorNumber;
            ParameterName = parameterName;
            ParameterValue = parameterValue;
            ErrorDescription = errorDescription;
        }

        /// <summary>
        /// error number from defined list
        /// </summary>
        [JsonProperty(PropertyName = "errorNumber")]
        public int? ErrorNumber { get; set; }

        /// <summary>
        /// parameterName which created the error
        /// </summary>
        [JsonProperty(PropertyName = "parameterName")]
        public string ParameterName { get; set; }

        /// <summary>
        /// the value of the parameter that failed
        /// </summary>
        [JsonProperty(PropertyName = "parameterValue")]
        public string ParameterValue { get; set; }

        /// <summary>
        /// errr description
        /// </summary>
        [JsonProperty(PropertyName = "errorDescription")]
        public string ErrorDescription { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (this.ParameterName != null)
            {
                if (this.ParameterName.Length > 1024)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "ParameterName", 1024);
                }
                if (this.ParameterName.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "ParameterName", 0);
                }
            }
            if (this.ParameterValue != null)
            {
                if (this.ParameterValue.Length > 2048)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "ParameterValue", 2048);
                }
                if (this.ParameterValue.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "ParameterValue", 0);
                }
            }
            if (this.ErrorDescription != null)
            {
                if (this.ErrorDescription.Length > 1024)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "ErrorDescription", 1024);
                }
                if (this.ErrorDescription.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "ErrorDescription", 0);
                }
            }
        }
    }
}
