// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace RestClientSDKLibrary
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for RestClientSDKLibraryClient.
    /// </summary>
    public static partial class RestClientSDKLibraryClientExtensions
    {
            /// <summary>
            /// Create a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The task.
            /// </param>
            public static object CreateTask(this IRestClientSDKLibraryClient operations, TasksCreatePayload body = default(TasksCreatePayload))
            {
                return Task.Factory.StartNew(s => ((IRestClientSDKLibraryClient)s).CreateTaskAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The task.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateTaskAsync(this IRestClientSDKLibraryClient operations, TasksCreatePayload body = default(TasksCreatePayload), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateTaskWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list of all task by filters
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderByDate'>
            /// </param>
            /// <param name='taskStatus'>
            /// </param>
            public static object GetAllTasks(this IRestClientSDKLibraryClient operations, string orderByDate = "asc", string taskStatus = "all")
            {
                return Task.Factory.StartNew(s => ((IRestClientSDKLibraryClient)s).GetAllTasksAsync(orderByDate, taskStatus), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// list of all task by filters
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderByDate'>
            /// </param>
            /// <param name='taskStatus'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAllTasksAsync(this IRestClientSDKLibraryClient operations, string orderByDate = "asc", string taskStatus = "all", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllTasksWithHttpMessagesAsync(orderByDate, taskStatus, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the task .
            /// </param>
            /// <param name='body'>
            /// The task.
            /// </param>
            public static object UpdateTask(this IRestClientSDKLibraryClient operations, long id, TasksCreatePayload body = default(TasksCreatePayload))
            {
                return Task.Factory.StartNew(s => ((IRestClientSDKLibraryClient)s).UpdateTaskAsync(id, body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the task .
            /// </param>
            /// <param name='body'>
            /// The task.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateTaskAsync(this IRestClientSDKLibraryClient operations, long id, TasksCreatePayload body = default(TasksCreatePayload), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateTaskWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the task
            /// </param>
            public static ErrorResponse DeleteTaskById(this IRestClientSDKLibraryClient operations, long id)
            {
                return Task.Factory.StartNew(s => ((IRestClientSDKLibraryClient)s).DeleteTaskByIdAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the task
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> DeleteTaskByIdAsync(this IRestClientSDKLibraryClient operations, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteTaskByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the specified tasks resource based on the id parameter.
            /// </summary>
            /// Demo Notes:
            /// An Id of 0 will generate a Server Error result.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The task's id.
            /// </param>
            public static object GetTaskById(this IRestClientSDKLibraryClient operations, long id)
            {
                return Task.Factory.StartNew(s => ((IRestClientSDKLibraryClient)s).GetTaskByIdAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the specified tasks resource based on the id parameter.
            /// </summary>
            /// Demo Notes:
            /// An Id of 0 will generate a Server Error result.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The task's id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetTaskByIdAsync(this IRestClientSDKLibraryClient operations, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTaskByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
